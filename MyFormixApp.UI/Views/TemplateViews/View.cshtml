@using System.Security.Claims
@using MyFormixApp.Domain.DTOs.Forms
@model MyFormixApp.Domain.DTOs.Templates.TemplateDetailsDto
@inject MyFormixApp.Application.Services.IFormService FormService

@{
    ViewData["Title"] = Model.Title;
    var isAuthenticated = User.Identity?.IsAuthenticated == true;

    Guid currentUserId = Guid.Empty;
    var isOwner = false;
    var existingForm = (FormDetailsDto)null;

    if (isAuthenticated)
    {
        currentUserId = Guid.Parse(User.FindFirstValue(ClaimTypes.NameIdentifier));
        existingForm = await FormService.GetByUserAndTemplateAsync(currentUserId, Model.Id);
        isOwner = Model.Author.Id == currentUserId;
    }
}

<div class="container mt-4">
    <!-- Header Section -->
    <div class="card mb-4">
        <div class="card-body">
            <div class="d-flex justify-content-between align-items-start flex-wrap gap-3">
                <div class="flex-grow-1">
                    <h1 class="mb-2">@Model.Title</h1>
                    <div class="d-flex align-items-center flex-wrap gap-2 text-muted">
                        <span>Created by @Model.Author.Username</span>
                        <span class="bullet">•</span>
                        <span>@Model.CreatedAt.ToString("d")</span>
                        @if (Model.Tags.Any())
                        {
                            <span class="bullet">•</span>
                            <div class="d-flex flex-wrap gap-1">
                                @foreach (var tag in Model.Tags.Take(3))
                                {
                                    <span class="badge bg-secondary">@tag</span>
                                }
                                @if (Model.Tags.Count > 3)
                                {
                                    <span class="badge bg-light text-dark">+@(Model.Tags.Count - 3)</span>
                                }
                            </div>
                        }
                    </div>
                </div>
                
                <div class="d-flex align-items-center flex-wrap gap-3">
                    <partial name="Partials/_LikeSection" model="Model" />
                    
                    @if (isAuthenticated)
                    {
                        if (existingForm == null)
                        {
                            <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#takeTemplateModal">
                                <i class="fas fa-clone me-1"></i> Fill Form
                            </button>
                        }
                        else
                        {
                            <div class="alert alert-info mb-0 py-2">
                                <i class="fas fa-check-circle me-2"></i>
                                You've already submitted this form. 
                                <a asp-controller="Forms" asp-action="Details" asp-route-id="@existingForm.Id" class="alert-link">
                                    View your response
                                </a>
                            </div>
                        }
                    }
                    else
                    {
                        <a asp-controller="Account" asp-action="Login" class="btn btn-primary">
                            <i class="fas fa-sign-in-alt me-1"></i> Login to Fill Form
                        </a>
                    }
                </div>
            </div>

            @if (!string.IsNullOrEmpty(Model.Description))
            {
                <div class="mt-3">
                    <p class="lead">@Model.Description</p>
                </div>
            }
        </div>
    </div>

    <!-- Template Preview -->
    <div class="card mb-4">
        <div class="card-header bg-light">
            <h3 class="mb-0">
                <i class="fas fa-eye me-2"></i> Template Preview
            </h3>
        </div>
        <div class="card-body">
            @foreach (var question in Model.Questions.OrderBy(q => q.Position))
            {
                <partial name="Partials/_QuestionTypes/_@(question.Type)Question" 
                         model="question" 
                         view-data="@(new ViewDataDictionary(ViewData) { { "IsPreview", true } })" />
            }
        </div>
    </div>

    <partial name="Partials/_CommentSection" model="Model" />
</div>

@if (isAuthenticated && existingForm == null)
{
    <div class="modal fade" id="takeTemplateModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header bg-primary text-white">
                    <h5 class="modal-title">
                        <i class="fas fa-edit me-2"></i> Fill Form: @Model.Title
                    </h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>

                <form method="post" action="@Url.Action("Take", "FormResponses", new { id = Model.Id })" id="formFillForm">
                    @Html.AntiForgeryToken()
                    <input type="hidden" name="templateId" value="@Model.Id" />
                    
                    <div class="modal-body">
                        @foreach (var question in Model.Questions.OrderBy(q => q.Position))
                        {
                            <div class="mb-4 question-container" data-question-id="@question.Id" data-required="@question.IsRequired">
                                <h5>@question.Title @Html.Raw(question.IsRequired ? "<span class='text-danger'>*</span>" : "")</h5>
                                
                                @if (!string.IsNullOrEmpty(question.Description))
                                {
                                    <p class="text-muted small">@question.Description</p>
                                }

                                @switch (question.Type.ToLower())
                                {
                                    case "text":
                                        <textarea name="responses[@question.Id]" 
                                                  class="form-control" 
                                                  @(question.IsRequired ? "required" : "")
                                                  placeholder="Enter your answer"></textarea>
                                        break;
                                    
                                    case "radio":
                                        @foreach (var option in question.Options.OrderBy(o => o.Position))
                                        {
                                            <div class="form-check">
                                                <input class="form-check-input" 
                                                       type="radio" 
                                                       name="responses[@question.Id]" 
                                                       value="@option.Id" 
                                                       @(question.IsRequired ? "required" : "") />
                                                <label class="form-check-label">@option.Text</label>
                                            </div>
                                        }
                                        break;
                                    
                                    case "checkbox":
                                        @foreach (var option in question.Options.OrderBy(o => o.Position))
                                        {
                                            <div class="form-check">
                                                <input class="form-check-input" 
                                                       type="checkbox" 
                                                       name="responses[@question.Id]" 
                                                       value="@option.Id" />
                                                <label class="form-check-label">@option.Text</label>
                                            </div>
                                        }
                                        break;
                                    
                                    case "select":
                                        <select name="responses[@question.Id]" 
                                                class="form-select" 
                                                @(question.IsRequired ? "required" : "")>
                                            <option value="">-- Select an option --</option>
                                            @foreach (var option in question.Options.OrderBy(o => o.Position))
                                            {
                                                <option value="@option.Id">@option.Text</option>
                                            }
                                        </select>
                                        break;
                                }
                            </div>
                        }
                    </div>
                    
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                            <i class="fas fa-times me-1"></i> Cancel
                        </button>
                        <button type="submit" class="btn btn-primary" id="submitFormBtn">
                            <i class="fas fa-paper-plane me-1"></i> Submit Form
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>
}

@section Scripts {
    <script src="~/js/templates/view.js"></script>
    <script src="~/js/templates/comments.js"></script>
    
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const formFillForm = document.getElementById('formFillForm');
            if (formFillForm) {
                formFillForm.addEventListener('submit', function(e) {
                    const requiredQuestions = document.querySelectorAll('.question-container[data-required="True"]');
                    let isValid = true;
                    
                    requiredQuestions.forEach(container => {
                        const questionId = container.dataset.questionId;
                        const inputs = container.querySelectorAll('input[type="text"], input[type="radio"], input[type="checkbox"], select, textarea');
                        
                        let hasValue = false;
                        
                        inputs.forEach(input => {
                            if (input.type === 'checkbox' || input.type === 'radio') {
                                if (input.checked) hasValue = true;
                            } else if (input.value.trim() !== '') {
                                hasValue = true;
                            }
                        });
                        
                        if (!hasValue) {
                            isValid = false;
                            container.classList.add('border', 'border-danger', 'p-3', 'rounded');
                        } else {
                            container.classList.remove('border', 'border-danger', 'p-3', 'rounded');
                        }
                    });
                    
                    if (!isValid) {
                        e.preventDefault();
                        alert('Please fill all required questions (marked with *)');
                    }
                });
            }
            
            const submitFormBtn = document.getElementById('submitFormBtn');
            if (submitFormBtn) {
                submitFormBtn.addEventListener('click', function() {
                    document.querySelectorAll('.question-container[data-required="True"]').forEach(container => {
                        container.classList.remove('border', 'border-danger', 'p-3', 'rounded');
                    });
                });
            }
        });
    </script>
    
    <style>
        .question-container {
            transition: all 0.3s ease;
        }
        .bullet {
            opacity: 0.6;
            padding: 0 0.25rem;
        }
    </style>
}