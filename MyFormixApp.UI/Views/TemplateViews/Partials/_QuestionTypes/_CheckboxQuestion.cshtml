@model MyFormixApp.Domain.DTOs.Questions.QuestionDto

<div class="mb-4 question-preview" data-required="@Model.IsRequired.ToString().ToLower()" data-type="checkbox">
    <div class="d-flex justify-content-between align-items-start mb-2">
        <h5 class="question-title">@Model.Title @(Model.IsRequired ? "*" : "")</h5>
        <span class="badge bg-info">Multiple Choice</span>
    </div>
    
    @if (!string.IsNullOrEmpty(Model.Description))
    {
        <p class="text-muted small mb-2">@Model.Description</p>
    }
    
    <div class="options-container ps-3">
        @foreach (var option in Model.Options.OrderBy(o => o.Position))
        {
            <div class="form-check mb-2">
                <input class="form-check-input" 
                       type="checkbox" 
                       id="option_@option.Id" 
                       @(Model.IsRequired ? "data-required-group='question_@Model.Id'" : "")
                       disabled>
                <label class="form-check-label" for="option_@option.Id">
                    @option.Text
                </label>
            </div>
        }
    </div>
    
    @if (!string.IsNullOrEmpty(Model.ImageUrl))
    {
        <div class="mt-2">
            <img src="@Model.ImageUrl" class="img-thumbnail" style="max-height: 150px;">
        </div>
    }
    
    <div class="mt-2">
        <span class="text-muted small">
            @(Model.IsRequired ? "At least one option required" : "Optional")
            @if (Model.ShowInTable)
            {
                <span> â€¢ Shown in results table</span>
            }
        </span>
    </div>
</div>

@if (ViewBag.IsEditMode == true)
{
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Checkbox question specific initialization
            const questionElement = document.querySelector('.question-preview[data-type="checkbox"]');
            if (questionElement) {
                // Setup required group validation if needed
                if (questionElement.dataset.required === 'true') {
                    const checkboxes = questionElement.querySelectorAll('input[type="checkbox"]');
                    checkboxes.forEach(checkbox => {
                        checkbox.addEventListener('change', function() {
                            const atLeastOneChecked = Array.from(checkboxes).some(cb => cb.checked);
                            questionElement.classList.toggle('is-invalid', !atLeastOneChecked);
                        });
                    });
                }
            }
        });
    </script>
}